Primitive:- (String,Boolean,Number,BigInt,Null,Undefined,Symbol ) (Value Type ?)
Non-Primitive:- Object (array, functions) also called object references. (Reference Type ?)

Primitive values
All types except Object define immutable values represented directly at the lowest level of the language.
We refer to values of these types as primitive values.
All primitive types, except null, can be tested by the typeof operator.
typeof null returns "object", so one has to use === null to test for null.

Most of the time, a primitive value is represented directly at the lowest 
level of the language implementation.
All primitives are immutable; that is, they cannot be altered. 
It is important not to confuse a primitive itself with a variable 
assigned a primitive value. The variable may be reassigned to a new value,
but the existing value can not be changed in the ways that objects, arrays, 
and functions can be altered. The language does not offer utilities 
to mutate primitive values.

All primitive types, except null and undefined, have their corresponding 
object wrapper types, which provide useful methods for working with the
primitive values. For example, the Number object provides methods like toExponential().
When a property is accessed on a primitive value, JavaScript automatically wraps
the value into the corresponding wrapper object and accesses the property on the 
object instead. However, accessing a property on null or undefined throws a TypeError exception,
which necessitates the introduction of the optional chaining operator.

Type    typeof return value   Object wrapper
Null	      "object"	       N/A
Undefined	  "undefined"	   N/A
Boolean	      "boolean"	       Boolean
Number	      "number"	       Number
BigInt	      "bigint"	       BigInt
String	      "string"	       String
Symbol	      "symbol"	       Symbol

The object wrapper classes' reference pages contain more information 
about the methods and properties available for each type, as well as 
detailed descriptions for the semantics of the primitive types themselves.

Objects, arrays, and functions are reference types.

The Object Datatype
The object data type can contain:
1. An object
2. An array
3. A date


String 
String Concatination 
- Addition operator (That can be hard to read â€“ especially when you have multiple expressions.)
- Template literals (Template strings) (More Readable)
Template literals are literals delimited with backtick (`) characters, 
allowing for multi-line strings, string interpolation with embedded expressions,
and special constructs called tagged templates.
Template literals are sometimes informally called template strings, because they 
are used most commonly for string interpolation (to create strings by doing 
substitution of placeholders). However, a tagged template literal may not result
in a string; it can be used with a custom tag function to perform whatever operations 
you want on the different parts of the template literal.

string interpolation ?????

